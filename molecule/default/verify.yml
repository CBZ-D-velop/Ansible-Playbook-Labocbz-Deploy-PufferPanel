---
# Don't forget to keep this file updated
# molecule/<scenario>/verify.yml
- name: "Verify DOCKER"
  hosts: "all:DOCKER"
  gather_facts: false
  tasks:

    - name: "Verify DOCKER"
      when: inv_install_docker | default(false)
      block:
        - name: "Get Docker service current state"
          register: install_docker_service_status
          failed_when: not (install_docker_service_status.status.ActiveState == 'active' or
            install_docker_service_status.status.ActiveState == 'activating' or
            install_docker_service_status.status.ActiveState == 'inactive')
          ansible.builtin.systemd:
            name: "docker"

        - name: "Check docker-compose command response"
          register: output
          changed_when: output.rc != 0
          failed_when: output.rc != 0
          ansible.builtin.command: "docker-compose -v"

        - name: "Check Docker insecure registries"
          when: inv_install_docker_insecure_registries is defined
          block:
            - name: "Check Docker registries file"
              register: file_check
              failed_when: not file_check.stat.exists
              ansible.builtin.stat:
                path: "/etc/docker/daemon.json"

            - name: "Check if insecure registries are in the /etc/docker/daemon.json file"
              loop: "{{ inv_install_docker_insecure_registries }}"
              loop_control:
                loop_var: registry
              register: registry_state
              failed_when: registry_state.rc != 0
              changed_when: registry_state.rc != 0
              ansible.builtin.command: "grep -q {{ registry }} /etc/docker/daemon.json"

# Don't forget to keep this file updated
# molecule/<scenario>/verify.yml
- name: "Verify APACHE2"
  hosts: "all:&APACHE2"
  gather_facts: false
  tasks:

    - name: "Verify APACHE2"
      when: inv_install_apache | default(false)
      block:
        - name: "Get Apache2 service current state"
          register: install_apache_service_status
          failed_when: not install_apache_service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "apache2"

        - name: "Check Apache2 folders and conf"
          loop:
            - "/etc/apache2/apache2.conf"
            - "/etc/apache2/ports.conf"
          loop_control:
            loop_var: folder_path
          register: folder_check
          failed_when: not folder_check.stat.exists
          ansible.builtin.stat:
            path: "{{ folder_path }}"

        - name: "Check Apache2 HTTP connectivity"
          ansible.builtin.wait_for:
            host: "{{ inventory_hostname }}"
            port: "{{ inv_install_apache_http_listen_port }}"
            timeout: 120

        - name: "Check Apache2 HTTPS connectivity"
          ansible.builtin.wait_for:
            host: "{{ inventory_hostname }}"
            port: "{{ inv_install_apache_https_listen_port }}"
            timeout: 120

        - name: "Get Apache2 service current state"
          register: apache_service_status
          failed_when: not apache_service_status.status.ActiveState == 'active'
          ansible.builtin.systemd:
            name: "apache2"

        - name: "Check Apache2 default configuration"
          block:
            - name: "Check Apache2 folders and conf"
              loop:
                - "/etc/apache2/apache2.conf"
                - "/etc/apache2/ports.conf"
              loop_control:
                loop_var: folder_path
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ folder_path }}"

            - name: "Check Apache2 HTTP and conf"
              loop: "{{ inv_add_apache_confs_configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ inv_add_apache_confs_conf_path }}/{{ vhost.server.name }}-HTTP.conf"

            - name: "Check Apache2 HTTPS and conf"
              loop: "{{ inv_add_apache_confs_configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              when: vhost.ssl
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ inv_add_apache_confs_conf_path }}/{{ vhost.server.name }}-HTTPS.conf"

            - name: "Check HTTPS conf: certs"
              loop: "{{ inv_add_apache_confs_configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              when: vhost.ssl.enabled | default(false)
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ vhost.ssl.crt }}"

            - name: "Check HTTPS conf: keys"
              loop: "{{ inv_add_apache_confs_configurations }}"
              loop_control:
                loop_var: vhost
              register: folder_check
              when: vhost.ssl.enabled | default(false)
              failed_when: not folder_check.stat.exists
              ansible.builtin.stat:
                path: "{{ vhost.ssl.key }}"

        - name: "Check Apache2 webserver"
          block:
            - name: "Check Apache2 connectivity"
              ansible.builtin.wait_for:
                host: "{{ inventory_hostname }}"
                port: "{{ inv_add_apache_confs_http_listen_port }}"
                timeout: 120

            - name: "Check default vhost on HTTP"
              register: result
              failed_when: not (result.status != 200 or result.status == -1)
              ansible.builtin.uri:
                url: "http://{{ inventory_hostname }}:{{ inv_add_apache_confs_http_listen_port }}/"
                method: "GET"

            - name: "Check default vhost on HTTPS"
              register: result
              failed_when: not (result.status != 200 or result.status == -1)
              ansible.builtin.uri:
                url: "https://{{ inventory_hostname }}:{{ inv_add_apache_confs_https_listen_port }}/"
                method: "GET"
